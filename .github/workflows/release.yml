name: Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Ockam Tag To Update Homebrew To. e.g. ockam_v0.59.0
        required: true
    schedule:
      - cron: '*/10 * * * *'

jobs:
  check_unique:
    name: Check If Ockam Has An Updated Release
    runs-on: ubuntu-20.04
    outputs:
      unique: ${{ steps.runner.outputs.unique }}
      tag_name: ${{ steps.runner.outputs.tag_name }}

    steps:
      - name: Checkout Terraform Repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          fetch-depth: 0
          ref: cron_log

      - name: Check If Cron Job Is Unique
        shell: bash
        id: runner
        run: |
          set -x
          tag_name='${{ github.event.inputs.tag }}'

          if [[ -z $tag_name ]]; then
            tag_name=$(curl --silent "https://api.github.com/repos/metaclips/ockam/releases/latest" | jq -r .tag_name)
            if [[ $tag_name != *"ockam_v"* ]]; then
              echo "Invalid tag name, exiting workflow"
              echo ::set-output name=unique::false
              exit 0
            fi

            find cron_log.csv

            # Ensure tag name doesn't exist in cron log
            if cat cron_log.csv | grep $tag_name; then
              echo ::set-output name=unique::false
            else
              echo ::set-output name=unique::true
              echo ::set-output name=tag_name::$tag_name
              echo "cron_job,$(date +'%b %d %Y %T'),$tag_name" >> cron_log.csv
            fi

          else
            response=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/metaclips/ockam/releases/tags/$tag_name | jq -r .tag_name)
            if [[ $response != $tag_name ]]; then
              echo "Tag name $tag_name does not exist"
              exit 1
            fi

            echo ::set-output name=unique::true
            echo ::set-output name=tag_name::${{ github.event.inputs.tag }}
            echo "${{ github.actor }},$(date +'%b %d %Y %T'),${{ github.event.inputs.tag }}" >> cron_log.csv
          fi

      - name: Cancel Workflow
        if: ${{ steps.runner.outputs.unique == 'false' }}
        uses: build-trust/.github/actions/cancel_workflow@custom-actions

      - name: Push To cron_log Repo
        if: ${{ steps.runner.outputs.unique == 'true' }}
        run: |
          git config --global user.email "bot@ockam.io"
          git config --global user.name "Ockam Bot"

          git add cron_log.csv
          git commit -m "Add ${{ steps.runner.outputs.tag_name }} to cron_log"
          git push

  create_pull_request:
    name: Create Pull Request
    runs-on: ubuntu-20.04
    environment: release
    needs: check_unique
    if: ${{ needs.check_unique.outputs.unique == 'true' }}
    steps:
      - name: Checkout Terraform Repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
        with:
          fetch-depth: 0

      - name: Bump Terraform Version
        shell: bash
        run: |
          set -x
          tag_name="${{ needs.check_unique.outputs.tag_name }}"
          version_number=${tag_name:7}

          temp_dir=$(mktemp -d)
          cp .github/constants.go.template $temp_dir/constants.go
          cd $temp_dir

          sed -i "s/ockam_version/$version_number/g" constants.go

          cp constants.go $GITHUB_WORKSPACE/internal/provider/constants.go
          cat $GITHUB_WORKSPACE/internal/provider/constants.go

      - name: Create Pull Request
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "bot@ockam.io"
          git config --global user.name "Ockam Bot"

          release_name="${{ needs.check_unique.outputs.tag_name }}_release_$(date +'%s')"
          git checkout -B $release_name
          git add $GITHUB_WORKSPACE/internal/provider/constants.go
          git commit -m "Update version number"
          git push --set-upstream origin $release_name

          gh pr create --title "${{ needs.check_unique.outputs.tag_name }} release" --body "Ockam release"\
           --base main -H $release_name -l auto_release -r @metaclips -R metaclips/terraform-provider-ockam

  # Should be ran after Pull request created above is merged
  create_release:
    name: Create Release
    runs-on: ubuntu-20.04
    environment: release
    needs: [check_unique, create_pull_request]
    if: ${{ needs.check_unique.outputs.unique == 'true' }}
    steps:
      - name: Checkout Terraform Repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      
      - uses: actions/setup-go@fcdc43634adb5f7ae75a9d7a9b9361790f7293e2
        with:
          go-version: 1.18

      - name: Create Release Context
        id: release
        run: |
          tag_name="${{ needs.check_unique.outputs.tag_name }}"
          version=${tag_name:6}
          echo ::set-output name=version::$version

      - name: Create GitHub release
        id: release_upload_url
        uses: actions/create-release@4c11c9fe1dcd9636620a16455165783b20fc7ea0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: '${{ steps.release.outputs.version }}'
          tag_name: '${{ steps.release.outputs.version }}'
          body: 'Ockam Terraform Provider - ${{ steps.release.outputs.version }}'

      - uses: actions/cache@48af2dc4a9e8278b89d7fa154b955c30c6aaab09
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - run: go mod download

      - name: Import GPG key
        id: import_gpg
        uses: hashicorp/ghaction-import-gpg@78437f97569a473e42b227be84d4084c2dfb49ba # v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PRIVATE_KEY_PASSWORD }}

      - uses: goreleaser/goreleaser-action@68acf3b1adf004ac9c2f0a4259e85c5f66e99bef # v2.9.1
        with:
          version: latest
          args: release --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
